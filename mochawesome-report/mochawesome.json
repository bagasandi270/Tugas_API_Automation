{
  "stats": {
    "suites": 3,
    "tests": 27,
    "passes": 26,
    "pending": 0,
    "failures": 1,
    "start": "2023-06-30T08:32:04.720Z",
    "end": "2023-06-30T08:32:29.423Z",
    "duration": 24703,
    "testsRegistered": 27,
    "passPercent": 96.29629629629629,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2be22b40-8685-4248-b169-edd02b199e66",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 535,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(function (err, response) {\n        token = response.body.data.accessToken\n        if (err) {\n            throw err\n        }\n        done()\n    })",
          "err": {},
          "uuid": "4571d0a0-0433-4d0f-8acf-026328af483e",
          "parentUUID": "2be22b40-8685-4248-b169-edd02b199e66",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "43fd56a4-365c-4744-9a67-ea0dbb68f37e",
          "title": "Test Endpoint Registration /registration and Login /authentications",
          "fullFile": "D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js",
          "file": "\\test\\testKasirAja.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user registration",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success create user registration",
              "timedOut": false,
              "duration": 529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/registration')\n    .send(userRegistration)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Toko berhasil didaftarkan')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.email).not.to.be.null\n        expect(await response.body.data.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.password).not.to.be.null\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "1335099b-1d1a-40d6-b654-2945ff2d8785",
              "parentUUID": "43fd56a4-365c-4744-9a67-ea0dbb68f37e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success login using valid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success login using valid credential",
              "timedOut": false,
              "duration": 612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Authentication berhasil ditambahkan')\n        expect(await response.body.data.accessToken).not.to.be.null\n        expect(await response.body.data.refreshToken).not.to.be.null\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('admin')\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.user.company_name).not.to.be.null\n        expect(await response.body.data.user.company_name).to.be.equal(userRegistration.name)\n        officeId = response.body.data.user.officeId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c37ba358-4c7f-4731-8d94-b9a79566c4e5",
              "parentUUID": "43fd56a4-365c-4744-9a67-ea0dbb68f37e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid credential",
              "timedOut": false,
              "duration": 569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"toko123@gmail.com\",\n        \"password\": \"toko123\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(401)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('Kredensial yang Anda berikan salah')\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "cd18e04c-775d-44c0-9395-22c4eb607fe4",
              "parentUUID": "43fd56a4-365c-4744-9a67-ea0dbb68f37e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid email format",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid email format",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"toko123@gmail\",\n        \"password\": \"toko123\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"email\\\" must be a valid email')\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "aecd5bde-a8b0-40eb-9b9d-39e3d13c5f30",
              "parentUUID": "43fd56a4-365c-4744-9a67-ea0dbb68f37e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login without any input",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login without any input",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send()\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"value\\\" must be of type object')\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "6df1387a-8829-4128-9fa4-35b2927ca4ac",
              "parentUUID": "43fd56a4-365c-4744-9a67-ea0dbb68f37e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1335099b-1d1a-40d6-b654-2945ff2d8785",
            "c37ba358-4c7f-4731-8d94-b9a79566c4e5",
            "cd18e04c-775d-44c0-9395-22c4eb607fe4",
            "aecd5bde-a8b0-40eb-9b9d-39e3d13c5f30",
            "6df1387a-8829-4128-9fa4-35b2927ca4ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2135,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f6f05fe2-7ce8-4aed-88d1-fd4c013cbabc",
          "title": "Test Endpoint User /users",
          "fullFile": "D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js",
          "file": "\\test\\testKasirAja.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user cashier",
              "fullTitle": "Test Endpoint User /users Success create user cashier",
              "timedOut": false,
              "duration": 616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/users')\n    .send(createUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil ditambahkan')\n        expect(await response.body.data.userId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(createUser.name)\n        userId = response.body.data.userId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "8b54e15b-132e-43a7-ab90-8787ee736aae",
              "parentUUID": "f6f05fe2-7ce8-4aed-88d1-fd4c013cbabc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user detail",
              "fullTitle": "Test Endpoint User /users Success get user detail",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(createUser.name)\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(createUser.email)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('kasir')\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "a3b7d07b-4666-44a8-951b-155fb3d7e4c3",
              "parentUUID": "f6f05fe2-7ce8-4aed-88d1-fd4c013cbabc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user list",
              "fullTitle": "Test Endpoint User /users Success get user list",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users')\n    .query({\n        q: 'kasir',\n        p: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "99eb8de9-485b-4818-b9b0-68b676f99dd9",
              "parentUUID": "f6f05fe2-7ce8-4aed-88d1-fd4c013cbabc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update user",
              "fullTitle": "Test Endpoint User /users Success update user",
              "timedOut": false,
              "duration": 517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/users/' + userId)\n    .send(updateUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUser.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil diupdate')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "b5c63295-e6f3-4fd6-9749-322bb3845b56",
              "parentUUID": "f6f05fe2-7ce8-4aed-88d1-fd4c013cbabc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete user",
              "fullTitle": "Test Endpoint User /users Success delete user",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil dihapus')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "4287ca4d-d5fa-4e0f-b0f0-31040142f641",
              "parentUUID": "f6f05fe2-7ce8-4aed-88d1-fd4c013cbabc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b54e15b-132e-43a7-ab90-8787ee736aae",
            "a3b7d07b-4666-44a8-951b-155fb3d7e4c3",
            "99eb8de9-485b-4818-b9b0-68b676f99dd9",
            "b5c63295-e6f3-4fd6-9749-322bb3845b56",
            "4287ca4d-d5fa-4e0f-b0f0-31040142f641"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1779,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dfdef5db-d2d0-4101-9514-8d6b68525663",
          "title": "Test Endpoint Unit /units",
          "fullFile": "D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js",
          "file": "\\test\\testKasirAja.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create unit",
              "fullTitle": "Test Endpoint Unit /units Success create unit",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/units')\n    .send(addUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Unit berhasil ditambahkan')\n        expect(await response.body.data.userId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addUnit.name)\n        unitId = response.body.data.unitId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e195cfd9-5ac1-404d-a31f-bd73f296873c",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit detail",
              "fullTitle": "Test Endpoint Unit /units Success get unit detail",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.unit.id).not.to.be.null\n        expect(await response.body.data.unit.name).not.to.be.null\n        expect(await response.body.data.unit.name).to.be.equal(addUnit.name)\n        expect(await response.body.data.unit.description).not.to.be.null\n        expect(await response.body.data.unit.description).to.be.equal(addUnit.description)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "83dd0ce6-8c5a-4f45-8f84-50c426d0566f",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get units list",
              "fullTitle": "Test Endpoint Unit /units Success get units list",
              "timedOut": false,
              "duration": 255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units')\n    .query({\n        q: 'gram',\n        page: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "7c71f654-3844-4459-bd7e-accabb06a4d2",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update unit",
              "fullTitle": "Test Endpoint Unit /units Success update unit",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/units/' + unitId)\n    .send(updateUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUnit.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "a9960dd7-353c-479b-b758-aba51ec97f7f",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete unit",
              "fullTitle": "Test Endpoint Unit /units Success delete unit",
              "timedOut": false,
              "duration": 299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "8650e8d2-9c26-4107-8fea-5e8fd941cf81",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add categories",
              "fullTitle": "Test Endpoint Unit /units Success add categories",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('Categories berhasil ditambahkan')\n       // expect(await response.body.data.userId).not.to.be.null\n       // expect(await response.body.data.name).not.to.be.null\n       // expect(await response.body.data.name).to.be.equal(addUnit.name)\n        categoryId = response.body.data.categoryId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "b4a85662-53b1-406b-8c8f-e927b875960c",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get categories detail",
              "fullTitle": "Test Endpoint Unit /units Success get categories detail",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "92bc68ca-71d6-4fd7-8592-10034cdbc653",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get categories list",
              "fullTitle": "Test Endpoint Unit /units Success get categories list",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories')\n    .query({\n        q: 'gram',\n        page: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "2e7f62da-fde8-4961-994c-576911bcebe1",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update Category",
              "fullTitle": "Test Endpoint Unit /units Success update Category",
              "timedOut": false,
              "duration": 211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/categories/' + categoryId)\n    .send(updateCategories)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCategories.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d119abb1-bdbf-4845-8571-59937a4c1214",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete category",
              "fullTitle": "Test Endpoint Unit /units Success delete category",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "85e4cd7d-a067-4bab-bc4a-f1918c7c77e4",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add Customer",
              "fullTitle": "Test Endpoint Unit /units Success add Customer",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('Categories berhasil ditambahkan')\n       // expect(await response.body.data.userId).not.to.be.null\n       // expect(await response.body.data.name).not.to.be.null\n       // expect(await response.body.data.name).to.be.equal(addUnit.name)\n        customerId = response.body.data.customerId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "2a8cc1f5-884c-46c4-bef5-f898495f5c82",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get categories detail",
              "fullTitle": "Test Endpoint Unit /units Success get categories detail",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "4dca9815-0c4a-41ac-960b-a412972f3574",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer list",
              "fullTitle": "Test Endpoint Unit /units Success get customer list",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers')\n    .query({\n        q: 'kasir',\n        p: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e4f49b38-25aa-4553-90e6-818e92c09698",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update customers",
              "fullTitle": "Test Endpoint Unit /units Success update customers",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/customers/' + customerId)\n    .send(updateCustomers)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCustomers.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "61dfe646-f5ab-4a1f-9ccc-3a722a8ffbc7",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete customers",
              "fullTitle": "Test Endpoint Unit /units Success delete customers",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('Customers berhasil dihapus')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "bbf43122-b36b-48fd-a1d6-3df01530bbc3",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add products",
              "fullTitle": "Test Endpoint Unit /units Success add products",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        \n            category_id : categoryId,\n            \"code\": \"A314ASDDFIER3432\",\n            \"name\": \"taro\",\n            \"price\": \"3500\",\n            \"cost\": \"3000\",\n            \"stock\": \"5\"\n    \n         \n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('products berhasil ditambahkan')\n        //expect(await response.body.data.productId).not.to.be.null\n       // expect(await response.body.data.name).not.to.be.null\n      // expect(await response.body.data.productId).not.to.be.null\n       //expect(await response.body.data.name).to.be.equal(\"taro\")\n       // productId = response.body.data.productId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "8305575e-5111-48ea-8d60-a00fb52ceadf",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get Product Detail",
              "fullTitle": "Test Endpoint Unit /units Success get Product Detail",
              "timedOut": true,
              "duration": 2004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/products/' + productId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n       expect(await response.body.data.products.id).not.to.be.null\n        //expect(await response.body.data.products.name).not.to.be.null\n        //expect(await response.body.data.products.name).to.be.equal(productId.name)\n        //expect(await response.body.data.products.email).not.to.be.null\n        //expect(await response.body.data.products.email).to.be.equal(productId.email)\n        //expect(await response.body.data.products.role).not.to.be.null\n        //expect(await response.body.data.products.role).to.be.equal('kasir')\n        //expect(await response.body.status).to.be.equal('success')\n        productId = response.body.data.productId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "36f7c3f6-0c31-48b5-a64f-3c6dbc01c297",
              "parentUUID": "dfdef5db-d2d0-4101-9514-8d6b68525663",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e195cfd9-5ac1-404d-a31f-bd73f296873c",
            "83dd0ce6-8c5a-4f45-8f84-50c426d0566f",
            "7c71f654-3844-4459-bd7e-accabb06a4d2",
            "a9960dd7-353c-479b-b758-aba51ec97f7f",
            "8650e8d2-9c26-4107-8fea-5e8fd941cf81",
            "b4a85662-53b1-406b-8c8f-e927b875960c",
            "92bc68ca-71d6-4fd7-8592-10034cdbc653",
            "2e7f62da-fde8-4961-994c-576911bcebe1",
            "d119abb1-bdbf-4845-8571-59937a4c1214",
            "85e4cd7d-a067-4bab-bc4a-f1918c7c77e4",
            "2a8cc1f5-884c-46c4-bef5-f898495f5c82",
            "4dca9815-0c4a-41ac-960b-a412972f3574",
            "e4f49b38-25aa-4553-90e6-818e92c09698",
            "61dfe646-f5ab-4a1f-9ccc-3a722a8ffbc7",
            "bbf43122-b36b-48fd-a1d6-3df01530bbc3",
            "8305575e-5111-48ea-8d60-a00fb52ceadf"
          ],
          "failures": [
            "36f7c3f6-0c31-48b5-a64f-3c6dbc01c297"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}