{
  "stats": {
    "suites": 3,
    "tests": 26,
    "passes": 26,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-30T15:56:42.519Z",
    "end": "2023-06-30T15:57:06.379Z",
    "duration": 23860,
    "testsRegistered": 26,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b56770c9-f3a1-467e-86f8-b60bed2cc7ba",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 559,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(function (err, response) {\n        token = response.body.data.accessToken\n        if (err) {\n            throw err\n        }\n        done()\n    })",
          "err": {},
          "uuid": "a6a0cee2-ed6f-4080-a32a-d9081afcb5db",
          "parentUUID": "b56770c9-f3a1-467e-86f8-b60bed2cc7ba",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c6e4039a-d144-4fa0-a40a-33c44104d3de",
          "title": "Test Endpoint Registration /registration and Login /authentications",
          "fullFile": "D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js",
          "file": "\\test\\testKasirAja.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user registration",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success create user registration",
              "timedOut": false,
              "duration": 554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/registration')\n    .send(userRegistration)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Toko berhasil didaftarkan')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.email).not.to.be.null\n        expect(await response.body.data.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.password).not.to.be.null\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "0c9f41b8-dea1-42aa-82a7-3d86c856f156",
              "parentUUID": "c6e4039a-d144-4fa0-a40a-33c44104d3de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success login using valid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success login using valid credential",
              "timedOut": false,
              "duration": 550,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Authentication berhasil ditambahkan')\n        expect(await response.body.data.accessToken).not.to.be.null\n        expect(await response.body.data.refreshToken).not.to.be.null\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('admin')\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.user.company_name).not.to.be.null\n        expect(await response.body.data.user.company_name).to.be.equal(userRegistration.name)\n        officeId = response.body.data.user.officeId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "92d509d3-f417-4253-99a0-aabb46050fd4",
              "parentUUID": "c6e4039a-d144-4fa0-a40a-33c44104d3de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid credential",
              "timedOut": false,
              "duration": 528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"toko123@gmail.com\",\n        \"password\": \"toko123\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(401)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('Kredensial yang Anda berikan salah')\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "eedd564e-865e-41f0-8701-17dde974bc5a",
              "parentUUID": "c6e4039a-d144-4fa0-a40a-33c44104d3de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid email format",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid email format",
              "timedOut": false,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"toko123@gmail\",\n        \"password\": \"toko123\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"email\\\" must be a valid email')\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "2b4d4086-3b5a-4691-b9d7-21ff216e813c",
              "parentUUID": "c6e4039a-d144-4fa0-a40a-33c44104d3de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login without any input",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login without any input",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send()\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"value\\\" must be of type object')\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "0329f51a-0211-46ce-b68a-127a5297c476",
              "parentUUID": "c6e4039a-d144-4fa0-a40a-33c44104d3de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c9f41b8-dea1-42aa-82a7-3d86c856f156",
            "92d509d3-f417-4253-99a0-aabb46050fd4",
            "eedd564e-865e-41f0-8701-17dde974bc5a",
            "2b4d4086-3b5a-4691-b9d7-21ff216e813c",
            "0329f51a-0211-46ce-b68a-127a5297c476"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2088,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9430884-8bd2-4f54-8ee2-dfb65b1d896e",
          "title": "Test Endpoint User /users",
          "fullFile": "D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js",
          "file": "\\test\\testKasirAja.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user cashier",
              "fullTitle": "Test Endpoint User /users Success create user cashier",
              "timedOut": false,
              "duration": 554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/users')\n    .send(createUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil ditambahkan')\n        expect(await response.body.data.userId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(createUser.name)\n        userId = response.body.data.userId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e6349699-1fbb-42c2-b556-57e2ff77a198",
              "parentUUID": "a9430884-8bd2-4f54-8ee2-dfb65b1d896e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user detail",
              "fullTitle": "Test Endpoint User /users Success get user detail",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(createUser.name)\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(createUser.email)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('kasir')\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "4d0203e7-0811-46af-9632-6d9ef72045f9",
              "parentUUID": "a9430884-8bd2-4f54-8ee2-dfb65b1d896e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user list",
              "fullTitle": "Test Endpoint User /users Success get user list",
              "timedOut": false,
              "duration": 240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users')\n    .query({\n        q: 'kasir',\n        p: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "df9bb669-9b2d-4801-9144-8caf9e0c306a",
              "parentUUID": "a9430884-8bd2-4f54-8ee2-dfb65b1d896e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update user",
              "fullTitle": "Test Endpoint User /users Success update user",
              "timedOut": false,
              "duration": 568,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/users/' + userId)\n    .send(updateUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUser.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil diupdate')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "83b33c5a-d421-4db9-807e-3953df562c1a",
              "parentUUID": "a9430884-8bd2-4f54-8ee2-dfb65b1d896e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete user",
              "fullTitle": "Test Endpoint User /users Success delete user",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil dihapus')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c6ee38d0-b572-4aa3-8d1d-27fc03fd3741",
              "parentUUID": "a9430884-8bd2-4f54-8ee2-dfb65b1d896e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6349699-1fbb-42c2-b556-57e2ff77a198",
            "4d0203e7-0811-46af-9632-6d9ef72045f9",
            "df9bb669-9b2d-4801-9144-8caf9e0c306a",
            "83b33c5a-d421-4db9-807e-3953df562c1a",
            "c6ee38d0-b572-4aa3-8d1d-27fc03fd3741"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1810,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52623ab8-335d-4a9c-a529-087a111a3b74",
          "title": "Test Endpoint Unit /units",
          "fullFile": "D:\\automation\\Tugas_API_Automation\\Tugas_API_Automation\\test\\testKasirAja.js",
          "file": "\\test\\testKasirAja.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create unit",
              "fullTitle": "Test Endpoint Unit /units Success create unit",
              "timedOut": false,
              "duration": 253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/units')\n    .send(addUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Unit berhasil ditambahkan')\n        expect(await response.body.data.userId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addUnit.name)\n        unitId = response.body.data.unitId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "a8342340-46e7-427b-9462-f8341e4e8252",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit detail",
              "fullTitle": "Test Endpoint Unit /units Success get unit detail",
              "timedOut": false,
              "duration": 233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.unit.id).not.to.be.null\n        expect(await response.body.data.unit.name).not.to.be.null\n        expect(await response.body.data.unit.name).to.be.equal(addUnit.name)\n        expect(await response.body.data.unit.description).not.to.be.null\n        expect(await response.body.data.unit.description).to.be.equal(addUnit.description)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "fb021ce6-0304-45e4-a4e5-4c30860ef4b1",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get units list",
              "fullTitle": "Test Endpoint Unit /units Success get units list",
              "timedOut": false,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units')\n    .query({\n        q: 'gram',\n        page: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "b4464e97-44ee-40f3-a9a8-dc5011046c31",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update unit",
              "fullTitle": "Test Endpoint Unit /units Success update unit",
              "timedOut": false,
              "duration": 236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/units/' + unitId)\n    .send(updateUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUnit.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "2ae68144-28e9-4f10-a022-a1fed331abef",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete unit",
              "fullTitle": "Test Endpoint Unit /units Success delete unit",
              "timedOut": false,
              "duration": 248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "470dad69-5d7a-4e86-acb5-94cfb93b27d7",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add categories",
              "fullTitle": "Test Endpoint Unit /units Success add categories",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('Categories berhasil ditambahkan')\n       // expect(await response.body.data.userId).not.to.be.null\n       // expect(await response.body.data.name).not.to.be.null\n       // expect(await response.body.data.name).to.be.equal(addUnit.name)\n        categoryId = response.body.data.categoryId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "36a47769-c6c6-44f5-a0a3-42e307debf91",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get categories detail",
              "fullTitle": "Test Endpoint Unit /units Success get categories detail",
              "timedOut": false,
              "duration": 238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "06ab45aa-aa48-44ec-b55a-e9b0c8cf5030",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get categories list",
              "fullTitle": "Test Endpoint Unit /units Success get categories list",
              "timedOut": false,
              "duration": 255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories')\n    .query({\n        q: 'gram',\n        page: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "9fb7baf0-952d-407e-9907-11c2b35609ca",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update Category",
              "fullTitle": "Test Endpoint Unit /units Success update Category",
              "timedOut": false,
              "duration": 261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/categories/' + categoryId)\n    .send(updateCategories)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCategories.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "15341891-9815-45a8-ba43-ce0812b19f7e",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete category",
              "fullTitle": "Test Endpoint Unit /units Success delete category",
              "timedOut": false,
              "duration": 229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "04412df8-3615-40df-92ca-7b90349b66b5",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add Customer",
              "fullTitle": "Test Endpoint Unit /units Success add Customer",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('Categories berhasil ditambahkan')\n       // expect(await response.body.data.userId).not.to.be.null\n       // expect(await response.body.data.name).not.to.be.null\n       // expect(await response.body.data.name).to.be.equal(addUnit.name)\n        customerId = response.body.data.customerId\n        console.log(response.body)\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d8dc9387-72ae-4a4d-9028-f9abda55cc44",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get categories detail",
              "fullTitle": "Test Endpoint Unit /units Success get categories detail",
              "timedOut": false,
              "duration": 251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "57d84b89-4f41-41e4-9db0-a804ffb7e072",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer list",
              "fullTitle": "Test Endpoint Unit /units Success get customer list",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers')\n    .query({\n        q: 'kasir',\n        p: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "2a3c4660-87dd-4f1e-8655-c3acf4a98f55",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update customers",
              "fullTitle": "Test Endpoint Unit /units Success update customers",
              "timedOut": false,
              "duration": 233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/customers/' + customerId)\n    .send(updateCustomers)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCustomers.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "8a58bb8c-3529-489a-bf80-4f1c4eb60559",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete customers",
              "fullTitle": "Test Endpoint Unit /units Success delete customers",
              "timedOut": false,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('Customers berhasil dihapus')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "38f6475e-116a-4ee5-97b2-62433c9f20b6",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add products",
              "fullTitle": "Test Endpoint Unit /units Success add products",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        \n            category_id : categoryId,\n            \"code\": \"A314ASDDFIER3432\",\n            \"name\": \"taro\",\n            \"price\": \"3500\",\n            \"cost\": \"3000\",\n            \"stock\": \"5\"\n    \n         \n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        //expect(await response.body.message).to.be.equal('products berhasil ditambahkan')\n        //expect(await response.body.data.productId).not.to.be.null\n       // expect(await response.body.data.name).not.to.be.null\n      // expect(await response.body.data.productId).not.to.be.null\n       //expect(await response.body.data.name).to.be.equal(\"taro\")\n       // productId = response.body.data.productId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "4b1ee852-8466-4284-9d4a-cdbddfc302e5",
              "parentUUID": "52623ab8-335d-4a9c-a529-087a111a3b74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8342340-46e7-427b-9462-f8341e4e8252",
            "fb021ce6-0304-45e4-a4e5-4c30860ef4b1",
            "b4464e97-44ee-40f3-a9a8-dc5011046c31",
            "2ae68144-28e9-4f10-a022-a1fed331abef",
            "470dad69-5d7a-4e86-acb5-94cfb93b27d7",
            "36a47769-c6c6-44f5-a0a3-42e307debf91",
            "06ab45aa-aa48-44ec-b55a-e9b0c8cf5030",
            "9fb7baf0-952d-407e-9907-11c2b35609ca",
            "15341891-9815-45a8-ba43-ce0812b19f7e",
            "04412df8-3615-40df-92ca-7b90349b66b5",
            "d8dc9387-72ae-4a4d-9028-f9abda55cc44",
            "57d84b89-4f41-41e4-9db0-a804ffb7e072",
            "2a3c4660-87dd-4f1e-8655-c3acf4a98f55",
            "8a58bb8c-3529-489a-bf80-4f1c4eb60559",
            "38f6475e-116a-4ee5-97b2-62433c9f20b6",
            "4b1ee852-8466-4284-9d4a-cdbddfc302e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3882,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}